name: 'publish'

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
  TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}

on:
  release:
    types: [created, edited]

# This workflow will trigger on each push to the `release` branch to create or update a GitHub release, build your app, and upload the artifacts to the release.

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'windows-latest'
            args: ''
          # - platform: 'macos-latest' # for Arm based macs (M1 and above).
          #   args: '--target aarch64-apple-darwin'
          # - platform: 'macos-latest' # for Intel based macs.
          #   args: '--target x86_64-apple-darwin'
          # - platform: 'ubuntu-22.04' # for Tauri v1 you could replace this with ubuntu-20.04.
          #   args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4.2.2

      - name: setup node
        uses: actions/setup-node@v4.1.0
        with:
          node-version: lts/*

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ 'wasm32-unknown-unknown' }}

      - name: Install Trunk
        uses: jetli/trunk-action@v0.5.0
        with:
          # Optional version of trunk to install(eg. 'v0.19.1', 'latest')
          version: 'latest'

      - name: Install frontend dependencies
        run: yarn install # change this to npm, pnpm or bun depending on which one you use.

      - uses: Swatinem/rust-cache@v2.7.5
        with:
          # The prefix cache key, this can be changed to start a new cache manually.
          # default: "v0-rust"
          prefix-key: ""

          # A cache key that is used instead of the automatic `job`-based key,
          # and is stable over multiple jobs.
          # default: empty
          # shared-key: ""

          # An additional cache key that is added alongside the automatic `job`-based
          # cache key and can be used to further differentiate jobs.
          # default: empty
          key: ""

          # A whitespace separated list of env-var *prefixes* who's value contributes
          # to the environment cache key.
          # The env-vars are matched by *prefix*, so the default `RUST` var will
          # match all of `RUSTC`, `RUSTUP_*`, `RUSTFLAGS`, `RUSTDOC_*`, etc.
          # default: "CARGO CC CFLAGS CXX CMAKE RUST"
          # env-vars: ""

          # The cargo workspaces and target directory configuration.
          # These entries are separated by newlines and have the form
          # `$workspace -> $target`. The `$target` part is treated as a directory
          # relative to the `$workspace` and defaults to "target" if not explicitly given.
          # default: ". -> target"
          # workspaces: ""

          # Additional non workspace directories to be cached, separated by newlines.
          # cache-directories: ""

          # Determines whether workspace `target` directories are cached.
          # If `false`, only the cargo registry will be cached.
          # default: "true"
          # cache-targets: ""

          # Determines if the cache should be saved even when the workflow has failed.
          # default: "false"
          cache-on-failure: "true"

          # Determines which crates are cached.
          # If `true` all crates will be cached, otherwise only dependent crates will be cached.
          # Useful if additional crates are used for CI tooling.
          # default: "false"
          cache-all-crates: "true"

          # Determines whether the cache should be saved.
          # If `false`, the cache is only restored.
          # Useful for jobs where the matrix is additive e.g. additional Cargo features,
          # or when only runs from `master` should be saved to the cache.
          # default: "true"
          # save-if: ""
          # To only cache runs from `master`:
          # save-if: ${{ github.ref == 'refs/heads/master' }}

          # Determines whether the cache should be restored.
          # If `true` the cache key will be checked and the `cache-hit` output will be set
          # but the cache itself won't be restored
          # default: "false"
          # lookup-only: ""

          # Specifies what to use as the backend providing cache
          # Can be set to either "github" or "buildjet"
          # default: "github"
          # cache-provider: "github"

      - uses: tauri-apps/tauri-action@v0.5.16
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseId: ${{ github.event.release.id }}
          releaseBody: ${{ github.event.release.body }}
          args: ${{ matrix.args }}
          includeUpdaterJson: true
